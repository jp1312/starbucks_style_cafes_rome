## --- Libraries
library(leaflet.extras)
library(leaflet)
library(htmlwidgets)
load(file = "C:/Users/pc/Documents/slowdata/post/starbucks_style_cafes_rome/git/data/cafes.RData")
## --- Prepare popups
line1 <- rep("<b>Not available</b>", nrow(Points))
for(i in 1:nrow(Points)) {
if(!is.na(Points$name[i])) line1[i] <- ifelse(!is.na(Points$website[i]),
paste0("<b><a href='", Points$website[i], "' target='_blank'  >", Points$name[i], "</a></b>"),
paste0("<b>", Points$name[i], "</b>"))
}
line2 <- rep("",nrow(Points))
for(i in 1:nrow(Points)) {
if(!is.na(Points$description[i])) line2[i] <- paste0("<br/>",Points$description[i])
}
line3 <- rep("",nrow(Points))
for(i in 1:nrow(Points)) {
if(!is.na(Points$address[i])) line3[i] <- paste0("<br/>",Points$address[i])
}
line4 <- rep("",nrow(Points))
for(i in 1:nrow(Points)) {
if(!is.na(Points$opening_hours[i])) line4[i] <- paste0("<br/>",Points$opening_hours[i])
}
popups <- rep(NA, nrow(Points))
for(i in 1:nrow(Points)) {
popups[i] <- paste0(line1[i], line2[i], line3[i], line4[i])
}
Points$popups <- popups
openmap <- leaflet(data = Points) %>%
addTiles() %>%
addProviderTiles(provider = "Esri.WorldStreetMap") %>%
setView(lng = 12.4964, lat = 41.9028, zoom = 12) %>%
addCircleMarkers(
lng = ~ lon,
lat = ~ lat,
#   col = "#FF0000",
fillOpacity = 1,
radius = 7,
weight = 2,
#   stroke = TRUE,
group = 'cafes',
label = ~name,
#   clusterOptions = markerClusterOptions(
#      maxClusterRadius=35,
#      disableClusteringAtZoom=14),
popup = ~popups) %>%
addFullscreenControl(pseudoFullscreen = TRUE) %>%
addSearchMarker(
targetGroup = 'cafes',
options = searchMarkersOptions(zoom=16, openPopup = TRUE))
#%>%
# addControl("<P>Search a cafe<br/>by name<br/><ul><li>Yeah</li><li>Circus</li><li>Baylon</li><li>...</li></P>",
#                                                                         position='topright')
openmap
saveWidget(openmap, "C:/Users/pc/Documents/slowdata/post/starbucks_style_cafes_rome/git/web/openmap.html", selfcontained = FALSE)
openmap <- leaflet(data = Points) %>%
addTiles() %>%
addProviderTiles(provider = "Esri.WorldStreetMap") %>%
setView(lng = 12.4964, lat = 41.9028, zoom = 12) %>%
addCircleMarkers(
lng = ~ lon,
lat = ~ lat,
#   col = "#FF0000",
fillOpacity = 1,
radius = 7,
weight = 2,
#   stroke = TRUE,
group = 'cafes',
label = ~name,
#   clusterOptions = markerClusterOptions(
#      maxClusterRadius=35,
#      disableClusteringAtZoom=14),
popup = ~popups) %>%
addFullscreenControl() %>%
addSearchMarker(
targetGroup = 'cafes',
options = searchMarkersOptions(zoom=16, openPopup = TRUE))
#%>%
# addControl("<P>Search a cafe<br/>by name<br/><ul><li>Yeah</li><li>Circus</li><li>Baylon</li><li>...</li></P>",
#                                                                         position='topright')
openmap
saveWidget(openmap, "C:/Users/pc/Documents/slowdata/post/starbucks_style_cafes_rome/git/web/openmap.html", selfcontained = FALSE)
library(dplyr)
library(googlesheets)
my_sheets <- gs_ls() # (expect a prompt to authenticate with Google interactively HERE)
my_sheets %>% glimpse()
gs_ls("rome_wifi_places") # search for a sheet by title
wifibar <- gs_title("rome_wifi_places") # 'register' (copy in my workspace) a sheet by title
wifibar <- wifibar %>% gs_gs() # re-register it if worried that sheet went out of date
gs_ws_ls(wifibar)
Points <- wifibar %>%
gs_read(ws = "List", range = "A12:L30", col_names = TRUE) # check the range!
str(Points)
# converting from string to factor
Points$name <- as.factor(Points$name)
Points$address <- as.factor(Points$address)
Points$zu <- as.factor(Points$zu)
Points$description <- as.factor(Points$description)
Points$opening_hours <- as.factor(Points$opening_hours)
Points$website <- as.factor(Points$website)
Points$contributor <- as.factor(Points$contributor)
Points$contact <- as.factor(Points$contact)
str(Points)
grepl('[^[:punct:]]', Points)
library(stringi)
stri_trans_general("Zażółć gęślą jaźń", "Latin-ASCII")
stri_trans_general(Points, "Latin-ASCII")
stri_trans_general(Points$name, "Latin-ASCII")
a <- c("a", "b", "è", "x", "èè", "èe", "à", "ù")
stri_trans_general(a, "Latin-ASCII")
Points$name <- stri_trans_general(Points$name)
Points$name <- stri_trans_general(Points$name, "Latin-ASCII")
Points$address <- stri_trans_general(Points$address, "Latin-ASCII")
Points$description <- stri_trans_general(Points$description, "Latin-ASCII")
Points$name <- as.factor(Points$name)
Points$address <- as.factor(Points$address)
Points$zu <- as.factor(Points$zu)
Points$description <- as.factor(Points$description)
Points$opening_hours <- as.factor(Points$opening_hours)
Points$website <- as.factor(Points$website)
Points$contributor <- as.factor(Points$contributor)
Points$contact <- as.factor(Points$contact)
str(Points)
save.image(file = "C:/Users/pc/Documents/slowdata/post/starbucks_style_cafes_rome/git/data/cafes.RData")
library(geojsonio)
?geojson_json
geojson_json(Points, lat = 'lat', lon = 'lon')
geojson_write(input = Points, lat = 'lat', lon = 'lon', file = "C:/Users/pc/Documents/slowdata/post/starbucks_style_cafes_rome/my_bootleaf-master/data/wificafes.geoJson")
pts_json <- geojson_json(Points, lat = 'lat', lon = 'lon')
geojson_write(input = pts_json, file = "C:/Users/pc/Documents/slowdata/post/starbucks_style_cafes_rome/my_bootleaf-master/data/wificafes.geoJson")
library(leaflet.extras)
library(leaflet)
library(htmlwidgets)
load(file = "C:/Users/pc/Documents/slowdata/post/starbucks_style_cafes_rome/git/data/cafes.RData")
line1 <- rep("<b>Not available</b>", nrow(Points))
for(i in 1:nrow(Points)) {
if(!is.na(Points$name[i])) line1[i] <- ifelse(!is.na(Points$website[i]),
paste0("<b><a href='", Points$website[i], "' target='_blank'  >", Points$name[i], "</a></b>"),
paste0("<b>", Points$name[i], "</b>"))
}
line2 <- rep("",nrow(Points))
for(i in 1:nrow(Points)) {
if(!is.na(Points$description[i])) line2[i] <- paste0("<br/>",Points$description[i])
}
line3 <- rep("",nrow(Points))
for(i in 1:nrow(Points)) {
if(!is.na(Points$address[i])) line3[i] <- paste0("<br/>",Points$address[i])
}
line4 <- rep("",nrow(Points))
for(i in 1:nrow(Points)) {
if(!is.na(Points$opening_hours[i])) line4[i] <- paste0("<br/>",Points$opening_hours[i])
}
popups <- rep(NA, nrow(Points))
for(i in 1:nrow(Points)) {
popups[i] <- paste0(line1[i], line2[i], line3[i], line4[i])
}
Points$popups <- popups
## --- Open Map
openmap <- leaflet(data = Points) %>%
addTiles() %>%
addProviderTiles(provider = "Esri.WorldStreetMap") %>%
setView(lng = 12.4964, lat = 41.9028, zoom = 12) %>%
addCircleMarkers(
lng = ~ lon,
lat = ~ lat,
#   col = "#FF0000",
fillOpacity = 1,
radius = 7,
weight = 2,
#   stroke = TRUE,
group = 'cafes',
label = ~name,
#   clusterOptions = markerClusterOptions(
#      maxClusterRadius=35,
#      disableClusteringAtZoom=14),
popup = ~popups) %>%
addFullscreenControl() %>%
addSearchMarker(
targetGroup = 'cafes',
options = searchMarkersOptions(zoom=16, openPopup = TRUE))
#%>%
# addControl("<P>Search a cafe<br/>by name<br/><ul><li>Yeah</li><li>Circus</li><li>Baylon</li><li>...</li></P>",
#                                                                         position='topright')
openmap
saveWidget(openmap, "C:/Users/pc/Documents/slowdata/post/starbucks_style_cafes_rome/git/web/openmap.html", selfcontained = FALSE)
zu <- readOGR(dsn = "C:/Users/pc/Documents/slowdata/post/starbucks_style_cafes_rome/git/shapes", layer = "ZU_COD")
library(rgdal)
zu <- readOGR(dsn = "C:/Users/pc/Documents/slowdata/post/starbucks_style_cafes_rome/git/shapes", layer = "ZU_COD")
crslonglat = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
zu <- spTransform(zu, CRS=crslonglat)
class(zu)
zu_json <- geojson_json(zu)
geojson_write(input = zu_json, file = "C:/Users/pc/Documents/slowdata/post/starbucks_style_cafes_rome/my_bootleaf-master/data/zu.geoJson")
## --- Libraries
library(dplyr)
# devtools::install_github("jennybc/googlesheets")
library(googlesheets)
library(stringi)
library(geojsonio)
library(rgdal)
## --- Retrieve data from shared Google Sheet
my_sheets <- gs_ls() # (expect a prompt to authenticate with Google interactively HERE)
my_sheets %>% glimpse()
gs_ls("rome_wifi_places") # search for a sheet by title
wifibar <- gs_title("rome_wifi_places") # 'register' (copy in my workspace) a sheet by title
wifibar <- wifibar %>% gs_gs() # re-register it if worried that sheet went out of date
gs_ws_ls(wifibar)
Points <- wifibar %>%
gs_read(ws = "List", range = "A12:L31", col_names = TRUE) # check the range!
str(Points)
# Normalizing text to Latin-ASCII
Points$name <- stri_trans_general(Points$name, "Latin-ASCII")
Points$address <- stri_trans_general(Points$address, "Latin-ASCII")
Points$description <- stri_trans_general(Points$description, "Latin-ASCII")
# converting from string to factor
Points$name <- as.factor(Points$name)
Points$address <- as.factor(Points$address)
Points$zu <- as.factor(Points$zu)
Points$description <- as.factor(Points$description)
Points$opening_hours <- as.factor(Points$opening_hours)
Points$website <- as.factor(Points$website)
Points$contributor <- as.factor(Points$contributor)
Points$contact <- as.factor(Points$contact)
str(Points)
# save data
save.image(file = "C:/Users/pc/Documents/slowdata/post/starbucks_style_cafes_rome/git/data/cafes.RData")
pts_json <- geojson_json(Points, lat = 'lat', lon = 'lon')
geojson_write(input = pts_json, file = "C:/Users/pc/Documents/slowdata/post/starbucks_style_cafes_rome/git/app/data/wificafes.geojson")
# Read SHAPEFILE with borders of 'zone urbanistiche' (neighborhoods)
zu <- readOGR(dsn = "C:/Users/pc/Documents/slowdata/post/starbucks_style_cafes_rome/git/shapes", layer = "ZU_COD")
crslonglat = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
zu <- spTransform(zu, CRS=crslonglat)
zu_json <- geojson_json(zu)
# geojson_write(input = zu_json, file = "C:/Users/pc/Documents/slowdata/post/starbucks_style_cafes_rome/my_bootleaf-master/data/zu.geojson")
